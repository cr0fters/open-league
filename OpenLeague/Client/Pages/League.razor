@page "/leagues/{LeagueReference:guid}"
@using OpenLeague.Shared
@using Newtonsoft.Json
@inject HttpClient _http

@if (_league != null && _club != null && _games != null)
{
    <PageTitle>League | @_league.Name</PageTitle>

    <h1>League</h1>

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <NavLink href="@($"clubs/{_club.Reference}")">
                    @_club.Name
                </NavLink>
            </li>
            <li class="breadcrumb-item active">
                @_league.Name
            </li>
        </ol>
    </nav>

    <div class="mb-3">
        <label class="form-label">Season</label>
        <select class="w-auto form-select" @onchange="SeasonChanged">
            <option value="">Overall</option>
            @foreach (var season in _games.GroupBy(game => game.Season).Select(games => games.Key))
            {
                <option value="@season">@season</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label class="form-label">Game</label>
        <select @ref="_myselect" id="myselect" class="w-auto form-select" @onchange="GameChanged">
            <option value="">Overall</option>
            @foreach (var game in _games.Where(x => x.Season == _season))
            {
                <option value="@game.Reference">@game.Date.ToString("M")</option>
            }
        </select>
    </div>
}

@if (_results != null)
{
    <LeagueTable Standings="_results"></LeagueTable>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}



@code {
    [Inject] IJSRuntime JsRuntime { get; set; }
    private List<Standing> _results;
    private OpenLeague.Shared.League _league;
    private OpenLeague.Shared.Club _club;
    private List<Game> _games;
    private int? _season;
    private Guid? _gameReference;
    private ElementReference _myselect;

    [Parameter]
    public Guid LeagueReference { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetLeague();
        await BuildResults();
        await BuildSelector();
    }

    private async Task BuildSelector()
    {
        var responseData = await (await _http.GetAsync($"api/leagues/{LeagueReference}/games")).Content.ReadAsStringAsync();
        var getGamesResponse = JsonConvert.DeserializeObject<GetGamesResponse>(responseData);
        if (getGamesResponse != null)
        {
            _games = getGamesResponse.Games;
        }
    }

    private async Task BuildResults()
    {
        string responseData;
        if (_season.HasValue && _gameReference.HasValue)
        {
            responseData = await (await _http.GetAsync($"api/games/{_gameReference.Value}/standings")).Content.ReadAsStringAsync();
        }
        else if (_season.HasValue)
        {
            responseData = await (await _http.GetAsync($"api/leagues/{LeagueReference}/seasons/{_season.Value}/standings")).Content.ReadAsStringAsync();
        }
        else
        {
            responseData = await (await _http.GetAsync($"api/leagues/{LeagueReference}/standings")).Content.ReadAsStringAsync();
        }

        var getStandingsResponse = JsonConvert.DeserializeObject<GetStandingsResponse>(responseData);
        if (getStandingsResponse != null)
        {
            _results = getStandingsResponse.Standings
                   .GroupBy(result => result.Player.Reference)
                   .OrderByDescending(results => results.Sum(result => result.Points))
                   .Select(result => new Standing
                       {
                           Player = result.First().Player,
                           Points = result.Sum(gameResult => gameResult.Points)
                       }).ToList();
        }
    }

    private async Task GetLeague()
    {
        var responseData = await (await _http.GetAsync($"api/leagues/{LeagueReference}")).Content.ReadAsStringAsync();
        var getLeagueResponse = JsonConvert.DeserializeObject<GetLeagueResponse>(responseData);
        if (getLeagueResponse != null)
        {
            _league = getLeagueResponse.League;
            _club = getLeagueResponse.Club;
        }
    }


    public class Selector
    {
        public List<SeasonModel> Seasons { get; set; }

        public class SeasonModel
        {
            public int Number { get; set; }
            public List<GameModel> Games { get; set; }

            public class GameModel
            {
                public DateTime GameDate { get; set; }
                public Guid Reference { get; set; }
            }
        }
    }

    private async Task SeasonChanged(ChangeEventArgs arg)
    {
        int.TryParse(arg.Value.ToString(), out var season);
        if (season > 0)
        {
            _season = season;
        }
        else
        {
            _season = null;
        }
        await JsRuntime.InvokeVoidAsync("exampleJsFunctions.selectElement", _myselect);
        await BuildResults();
    }

    private async Task GameChanged(ChangeEventArgs arg)
    {
        Guid.TryParse(arg.Value.ToString(), out var gameReference);
        _gameReference = gameReference == Guid.Empty ? null : gameReference;
        await BuildResults();
    }

}